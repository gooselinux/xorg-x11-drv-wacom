From 4f2f6be5a2a11cc061a5e5c351dd1ac1ea1a1033 Mon Sep 17 00:00:00 2001
From: Peter Hutterer <peter.hutterer@who-t.net>
Date: Thu, 22 Jul 2010 14:39:23 +1000
Subject: [PATCH] Don't load keysyms into the driver, use keycodes instead.

This addresses a hang in the driver when buttons are configured to send
keystrokes. The current code calls XkbGetCoreMap() which allocates during
the signal handler, causing server hangs.

This patch changes the driver to use keycodes instead of keysyms. There are
a number of reasons for this:
- XkbCoreMap() only hands us a core keymap, not the XKB one that everyone
  uses these days. There are some differences between the core and the XKB
  map (mainly the use of modifiers), hence we should be focusing on the XKB
  map anyway.
- Parsing the XKB map manually in the driver is complicated and not
  something we want to do, especially when trying to maintain ABI compat
  with multiple X server versions. On the other hand, the client-side API
  for XKB is frozen like all of Xlib.
- The driver is not notified of XKB layout changes, thus a cached map would
  potentially be out of date. Moving keysym to keycode conversion to the
  client avoids this.
- The server does not communicate through keysyms to any client, keycodes
  are the only information. It is up to the client to pick the keysym (and
  glyph) based on the keycode.

Note that this changes the property API. Clients that would write straight
to a button mapping property will need to change. AFAICT, only xsetwacom
does this at this point and xsetwacom is updated with this patch.

Note that the current xsetwacom implementation will only focus on level 0
keys. It will not automatically fill in the modifier states. Thus, to get
e.g. a string of "aBc", the following configuration is required:
    xsetwacom set "device" "Button1" "key a +shift B -shift c"

xsetwacom releases modifiers at the end of the configuration, thus to get a
single uppercase letter (or multiple letters), the following is enough:
    xsetwacom set "device" "Button1" "key shift A"

Note: this breaks Ctrl+/- zoom support for keyboard layouts that have +/- on
a different key than the 'us' keyboard layout. Did I mention that hacking up
gestures in the driver is a bad idea?

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>

Conflicts:

	src/wcmCommon.c
	src/wcmTouchFilter.c
	src/xf86Wacom.h
	tools/xsetwacom.c

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>

This also pulls in eabc771985c88fcf99dbc12d84705cf2faace3da:
    xsetwacom: fix offset for special key mappings.

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
---
 src/wcmCommon.c      |  103 ++++---------------------------------------------
 src/wcmTouchFilter.c |   18 ++++++---
 src/xf86Wacom.h      |    2 +-
 tools/xsetwacom.c    |   54 ++++++++++++++++++++++++--
 4 files changed, 71 insertions(+), 106 deletions(-)

diff --git a/src/wcmCommon.c b/src/wcmCommon.c
index 45898a4..35c0156 100644
--- a/src/wcmCommon.c
+++ b/src/wcmCommon.c
@@ -291,94 +291,9 @@ static void wcmSendButtons(LocalDevicePtr local, int buttons, int rx, int ry,
 	}
 }
 
-/*****************************************************************************
- * wcmEmitKeysym --
- *   Emit a keydown/keyup event
- ****************************************************************************/
-static int ODDKEYSYM [][2] = 
+void wcmEmitKeycode (DeviceIntPtr keydev, int keycode, int state)
 {
-	{ XK_asciitilde, XK_grave },
-	{ XK_exclam, XK_1 },
-	{ XK_at, XK_2 },
-	{ XK_numbersign, XK_3 },
-	{ XK_dollar, XK_4 },
-	{ XK_percent, XK_5 },
-	{ XK_asciicircum, XK_6 },
-	{ XK_ampersand, XK_7 },
-	{ XK_asterisk, XK_8 },
-	{ XK_parenleft, XK_9 },
-	{ XK_parenright, XK_0 },
-	{ XK_underscore, XK_minus },
-	{ XK_plus, XK_equal },
-	{ XK_braceleft, XK_bracketleft },
-	{ XK_braceright, XK_bracketright },
-	{ XK_colon, XK_semicolon },
-	{ XK_quotedbl, XK_quoteright },
-	{ XK_less, XK_comma },
-	{ XK_greater, XK_period },
-	{ XK_question, XK_slash },
-	{ XK_bar, XK_backslash },
-	{ 0, 0}
-};
-
-void wcmEmitKeysym (DeviceIntPtr keydev, int keysym, int state)
-{
-	int i, j, alt_keysym = 0;
-
-	/* Now that we have the keycode look for key index */
-#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 7
-	KeySymsRec *ksr = XkbGetCoreMap(keydev);
-#else
-	KeySymsRec *ksr = &keydev->key->curKeySyms;
-#endif
-
-	for (i = ksr->minKeyCode; i <= ksr->maxKeyCode; i++)
-		if (ksr->map [(i - ksr->minKeyCode) * ksr->mapWidth] == keysym)
-			break;
-
-	if (i > ksr->maxKeyCode)
-	{
-		if (isupper(keysym))
-			alt_keysym = tolower(keysym);
-		else
-		{
-			j = 0;
-			while (ODDKEYSYM [j][0])
-			{
-				if (ODDKEYSYM [j][0] == keysym)
-				{
-					alt_keysym = ODDKEYSYM [j][1];
-					break;
-				}
-				j++;
-			}
-		}
-		if ( alt_keysym )
-		{
-			for (j = ksr->minKeyCode; j <= ksr->maxKeyCode; j++)
-				if (ksr->map [(j - ksr->minKeyCode) * ksr->mapWidth] == XK_Shift_L)
-					break;
-			if (state)
-				xf86PostKeyboardEvent (keydev, j, 1);
-			for (i = ksr->minKeyCode; i <= ksr->maxKeyCode; i++)
-				if (ksr->map [(i - ksr->minKeyCode) * ksr->mapWidth] == alt_keysym)
-					break;
-			xf86PostKeyboardEvent (keydev, i, state);
-			if (!state)
-				xf86PostKeyboardEvent (keydev, j, 0);
-		}
-		else
-			xf86Msg (X_WARNING, "%s: Couldn't find key with code %08x on keyboard device %s\n",
-					keydev->name, keysym, keydev->name);
-#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 7
-		xfree(ksr);
-#endif
-		return;
-	}
-	xf86PostKeyboardEvent (keydev, i, state);
-#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 7
-	xfree(ksr);
-#endif
+	xf86PostKeyboardEvent (keydev, keycode, state);
 }
 
 static void toggleDisplay(LocalDevicePtr local)
@@ -486,9 +401,9 @@ static void sendAButton(LocalDevicePtr local, int button, int mask,
 				break;
 			case AC_KEY:
 				{
-					int key_sym = (action & AC_CODE);
+					int key_code = (action & AC_CODE);
 					int is_press = (action & AC_KEYBTNPRESS);
-					wcmEmitKeysym(local->dev, key_sym, is_press);
+					wcmEmitKeycode(local->dev, key_code, is_press);
 				}
 				break;
 			case AC_MODETOGGLE:
@@ -539,15 +454,15 @@ static void sendAButton(LocalDevicePtr local, int button, int mask,
 				break;
 			case AC_KEY:
 				{
-					int key_sym = (action & AC_CODE);
+					int key_code = (action & AC_CODE);
 
 					/* don't care about releases here */
 					if (!(action & AC_KEYBTNPRESS))
 						break;
 
-					if (countPresses(key_sym, &priv->keys[button][i],
+					if (countPresses(key_code, &priv->keys[button][i],
 							ARRAY_SIZE(priv->keys[button]) - i))
-						wcmEmitKeysym(local->dev, key_sym, 0);
+						wcmEmitKeycode(local->dev, key_code, 0);
 				}
 		}
 
@@ -673,8 +588,8 @@ static void sendWheelStripEvents(LocalDevicePtr local, const WacomDeviceState* d
 	    break;
 
 	    case AC_KEY:
-		    wcmEmitKeysym(local->dev, (fakeButton & AC_CODE), 1);
-		    wcmEmitKeysym(local->dev, (fakeButton & AC_CODE), 0);
+		    wcmEmitKeycode(local->dev, (fakeButton & AC_CODE), 1);
+		    wcmEmitKeycode(local->dev, (fakeButton & AC_CODE), 0);
 	    break;
 
 	    default:
diff --git a/src/wcmTouchFilter.c b/src/wcmTouchFilter.c
index f31d948..e40ea2e 100644
--- a/src/wcmTouchFilter.c
+++ b/src/wcmTouchFilter.c
@@ -400,19 +400,25 @@ static void wcmFingerZoom(WacomDevicePtr priv)
 		for (i=0; i<(int)(((double)abs(dist)/
 				(double)WACOM_MOTION_IN_POINT) + 0.5); i++)
 		{
-			wcmEmitKeysym (priv->local->dev, XK_Control_L, 1);
+			/* FIXME: this hardcodes the positions of ctrl, + and - to the ones on
+			   the us keyboard layout. Tough luck. The alternative is to run
+			   through the XKB table and figure out where +/- are hiding. Good
+			   luck. Gesture support is not supposed to be in the driver...
+			 */
+			int key = (dist > 0) ? 21 /*XK_plus*/ : 20 /*XK_minus*/;
+			wcmEmitKeycode (priv->local->dev, 37 /*XK_Control_L*/, 1);
 			/* zooming in */
 			if (dist > 0)
 			{
-				wcmEmitKeysym (priv->local->dev, XK_plus, 1);
-				wcmEmitKeysym (priv->local->dev, XK_plus, 0);
+				wcmEmitKeycode (priv->local->dev, key, 1);
+				wcmEmitKeycode (priv->local->dev, key, 0);
 			}
 			else /* zooming out */
 			{
-				wcmEmitKeysym (priv->local->dev, XK_minus, 1);
-				wcmEmitKeysym (priv->local->dev, XK_minus, 0);
+				wcmEmitKeycode (priv->local->dev, key, 1);
+				wcmEmitKeycode (priv->local->dev, key, 0);
 			}
-			wcmEmitKeysym (priv->local->dev, XK_Control_L, 0);
+			wcmEmitKeycode (priv->local->dev, 37 /*XK_Control_L*/, 0);
 		}
 
 		/* reset initial states */
diff --git a/src/xf86Wacom.h b/src/xf86Wacom.h
index 297a293..aaf3a22 100644
--- a/src/xf86Wacom.h
+++ b/src/xf86Wacom.h
@@ -164,7 +164,7 @@ extern int wcmDevSwitchMode(ClientPtr client, DeviceIntPtr dev, int mode);
 extern void wcmChangeScreen(LocalDevicePtr local, int value);
 extern void wcmTilt2R(WacomDeviceStatePtr ds);
 extern void wcmFingerTapToClick(WacomCommonPtr common);
-extern void wcmEmitKeysym(DeviceIntPtr keydev, int keysym, int state);
+extern void wcmEmitKeycode(DeviceIntPtr keydev, int keycode, int state);
 
 extern void wcmRotateTablet(LocalDevicePtr local, int value);
 extern void wcmRotateCoordinates(LocalDevicePtr local, int* x, int* y);
diff --git a/tools/xsetwacom.c b/tools/xsetwacom.c
index 380c05e..a279648 100644
--- a/tools/xsetwacom.c
+++ b/tools/xsetwacom.c
@@ -34,6 +34,7 @@
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #include <X11/extensions/XInput.h>
+#include <X11/XKBlib.h>
 
 #define TRACE(...) \
 	if (verbose) fprintf(stderr, "... " __VA_ARGS__)
@@ -1126,11 +1127,44 @@ static int is_modifier(const char* modifier)
 	return 0;
 }
 
+/* Return the first keycode to have the required keysym in the current group.
+   TODOs:
+   - parse other groups as well (do we need this?)
+   - for keysyms not on level 0, return the keycodes for the modifiers as
+     well
+*/
+static int keysym_to_keycode(Display *dpy, KeySym sym)
+{
+	static XkbDescPtr xkb = NULL;
+	XkbStateRec state;
+	int group;
+	int kc = 0;
+
+
+	if (!xkb)
+		xkb = XkbGetKeyboard(dpy, XkbAllComponentsMask, XkbUseCoreKbd);
+	XkbGetState(dpy, XkbUseCoreKbd, &state);
+	group = state.group;
+
+	for (kc = xkb->min_key_code; kc <= xkb->max_key_code; kc++)
+	{
+		KeySym* ks;
+		int i;
+
+		ks = XkbKeySymsPtr(xkb, kc);
+		for (i = 0; i < XkbKeyGroupWidth(xkb, kc, state.group); i++)
+			if (ks[i] == sym)
+				goto out;
+	}
+
+out:
+	return kc;
+}
 /*
    Map gibberish like "ctrl alt f2" into the matching AC_KEY values.
    Returns 1 on success or 0 otherwise.
  */
-static int special_map_keystrokes(int argc, char **argv, unsigned long *ndata, unsigned long* data)
+static int special_map_keystrokes(Display *dpy, int argc, char **argv, unsigned long *ndata, unsigned long* data)
 {
 	int i;
 	int nitems = 0;
@@ -1138,6 +1172,7 @@ static int special_map_keystrokes(int argc, char **argv, unsigned long *ndata, u
 	for (i = 0; i < argc; i++)
 	{
 		KeySym ks;
+		KeyCode kc;
 		int need_press = 0, need_release = 0;
 		char *key = argv[i];
 
@@ -1175,10 +1210,18 @@ static int special_map_keystrokes(int argc, char **argv, unsigned long *ndata, u
 			need_press = need_release = 1;
 
 		ks = XStringToKeysym(key);
+		kc = keysym_to_keycode(dpy, ks);
+
 		if (need_press)
-			data[nitems++] = AC_KEY | AC_KEYBTNPRESS | ks;
+			data[*ndata + nitems++] = AC_KEY | AC_KEYBTNPRESS | kc;
 		if (need_release)
-			data[nitems++] = AC_KEY | ks;
+			data[*ndata + nitems++] = AC_KEY | kc;
+
+		TRACE("Key map %ld (%d, '%s') [%s,%s]\n", ks, kc,
+				XKeysymToString(ks),
+				need_press ?  "press" : "",
+				need_release ?  "release" : "");
+
 	}
 
 	*ndata += nitems;
@@ -1248,7 +1291,7 @@ static void special_map_buttons(Display *dpy, XDevice *dev, param_t* param, int
 
 	struct keywords {
 		const char *keyword;
-		int (*func)(int, char **, unsigned long*, unsigned long *);
+		int (*func)(Display*, int, char **, unsigned long*, unsigned long *);
 	} keywords[] = {
 		{"key", special_map_keystrokes},
 		{ NULL, NULL }
@@ -1296,7 +1339,8 @@ static void special_map_buttons(Display *dpy, XDevice *dev, param_t* param, int
 		int j;
 		for (j = 0; keywords[j].keyword; j++)
 			if (strcasecmp(words[i], keywords[j].keyword) == 0)
-				i += keywords[j].func(nwords - i - 1,
+				i += keywords[j].func(dpy,
+						      nwords - i - 1,
 						      &words[i + 1],
 						      &nitems, data);
 	}
-- 
1.7.1

